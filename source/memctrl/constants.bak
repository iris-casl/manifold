/*
 * =====================================================================================
 *
 *       Filename:  constants.h
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  02/25/2010 11:18:28 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  SYED MINHAJ HASSAN
 *        Company:  Georgia Institute of Technology
 *
 * =====================================================================================
 */
#ifndef _CONSTANTS_H
#define _CONSTANTS_H
#include <math.h>
#include <stdint.h>

typedef unsigned long long int Time;
typedef unsigned long long int Addr_t;
typedef unsigned int UInt;

//#define DEBUG 1
//#define DEEP_DEBUG 1
//#define DEEP_PRINT 1


enum DRAM_CONFIG { DDR3_1333_9, 
    DDR3_1600_10,
    DDR3_1333_6,
    DDR2_533_4,
    DDR2_667_4
};
enum DRAM_PAGE_POLICY { OPEN_PAGE_POLICY, CLOSE_PAGE_POLICY};
enum MC_SCHEDULLING_ALGO { PAR_BS, FR_FCFS, FC_FS, NFQ};
enum ADDR_MAP_SCHEME { PAGE_INTERLEAVING, PERMUTATION, CACHELINE_INTERLEAVING, SWAPPING, GENERIC, NO_SCHEME, LOCAL_ADDR_MAP};
extern DRAM_PAGE_POLICY dram_page_policy;
extern ADDR_MAP_SCHEME addr_map_scheme;
extern MC_SCHEDULLING_ALGO mc_scheduling_algorithm;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////      	Following schemes are developed under the following assumptions
//////// 	1) Page Size = Row Size
////////	2) Coulumn size cannot be larger than cache block size
////////	3) Tag bilastFinishTimets t should be less than k+l+r
////////	4) Cache block size * blocks per row = cols per row * column size = row * size
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 

//#define CLUBBED 1 // Uncomment this for dhruvs classy clubbing optimizations
#define STALL_TIME 1
#define UPPER_STALL_TIME 300	
#define BANK_LIMIT 5 
#define RESPONSE_LIMIT 56
#define AVG_LAT_RATE_SCH 1

#define NO_OF_THREADS 2
#define NO_OF_CHANNELS 1		//  (int)log2() = k bits. 
#define NO_OF_RANKS 32       		//  (int)log2() = l bits.
#define NO_OF_BANKS 8         		//  (int)log2() = b bits. 
#define NO_OF_BUFFERS NO_OF_BANKS
#define NO_OF_ROWS 8192 		//4096 //  (int)log2() = r bits. 
#define NO_OF_COLUMNS 	128         	//  (int)log2() = c bits. 
#define COLUMN_SIZE 64        		//  (int)log2() = v bits.  Column Size = 2bytes
#define BLOCKS_PER_ROW 128          	//  (int)log2() = n bits.  Cache line Per Row
#define CACHE_BLOCK_SIZE 64         	//  (int)log2() = z bits.  L2 Cache Block Size
#define ROW_SIZE NO_OF_COLUMNS*COLUMN_SIZE //(Also equal to BLOCKS_PER_ROW*CACHE_BLOCK_SIZE)
#define DRAM_SIZE NO_OF_CHANNELS*NO_OF_RANKS*NO_OF_BANKS*NO_OF_ROWS*ROW_SIZE
#define TAG_BITS 8              	// t bits

#define USE_MSHR 1 
#define MSHR_SIZE 8 

//#define THREAD_BITS_POSITION 22
//#define GLOBAL_XOR 1

//#define CORE_UNCORE_RATIO 1
#define MAX_BUFFER_SIZE 8
#define MAX_CMD_BUFFER_SIZE 16
#define RESPONSE_BUFFER_SIZE 56*8 //(NO_OF_CHANNELS * (NO_OF_BANKS*NO_OF_RANKS*MAX_BUFFER_SIZE + MAX_CMD_BUFFER_SIZE)) / 4  // Size = Upper Limit / 2

#define BATCH_FORM_TIME 2000;
//#define MAX_BATCH_TIME 2000;
#define MAX_BATCH_SIZE 5
#define MAX_READ_OV_WRITE 8

#define NETWORK_ADDRESS_BITS 48
#define NETWORK_THREADID_BITS 6
#define NETWORK_COMMAND_BITS 3 

#define READ_SIZE CACHE_BLOCK_SIZE
#define WRITE_SIZE CACHE_BLOCK_SIZE
#define PREFETCH_SIZE CACHE_BLOCK_SIZE
#define WRITEBACK_SIZE CACHE_BLOCK_SIZE

extern float CORE_SPEED;
extern float CYCLE_2_NS;

extern unsigned int DDR_BUS_WIDTH;
extern float BUS_SPEED;
extern float MEM_SPEED;
extern float MEM_CYCLE;
extern float BUS_CYCLE;
extern float CYCLE_2_NS;
extern float tREFI;
extern float tRFC;
extern float tRC;
extern float tRAS;
extern unsigned int t_CMD;
extern unsigned int t_RCD;
extern unsigned int t_RRD;
extern unsigned int t_RAS;
extern unsigned int t_CAS;
extern unsigned int t_RTRS;
extern unsigned int t_OST;
extern unsigned int t_WR;
extern unsigned int t_WTR;
extern unsigned int t_RP;
extern unsigned int t_CCD;
extern unsigned int t_AL;
extern unsigned int t_CWD;
extern unsigned int t_RC;
extern unsigned int t_RTP;
extern unsigned int t_RFC;

#define REFRESH_PERIOD CORE_SPEED*64000			// 64ms
#define REFRESH_INC (ullint)floor(REFRESH_PERIOD/(8192)) - BUS_CYCLE	// -1 BUS_CYCLE to be on the safe side

#endif

